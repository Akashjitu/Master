//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileUpload.Client.FileUploadProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileUploadProxy.IFileService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Authenticate", ReplyAction="http://tempuri.org/IFileService/AuthenticateResponse")]
        string Authenticate(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Authenticate", ReplyAction="http://tempuri.org/IFileService/AuthenticateResponse")]
        System.Threading.Tasks.Task<string> AuthenticateAsync(string username, string password);
        
        // CODEGEN: Generating message contract since the operation UploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/UploadFile", ReplyAction="http://tempuri.org/IFileService/UploadFileResponse")]
        FileUpload.Client.FileUploadProxy.UploadFileResponse UploadFile(FileUpload.Client.FileUploadProxy.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/UploadFile", ReplyAction="http://tempuri.org/IFileService/UploadFileResponse")]
        System.Threading.Tasks.Task<FileUpload.Client.FileUploadProxy.UploadFileResponse> UploadFileAsync(FileUpload.Client.FileUploadProxy.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetAllFileName", ReplyAction="http://tempuri.org/IFileService/GetAllFileNameResponse")]
        FileUploadContract.Models.Reference GetAllFileName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetAllFileName", ReplyAction="http://tempuri.org/IFileService/GetAllFileNameResponse")]
        System.Threading.Tasks.Task<FileUploadContract.Models.Reference> GetAllFileNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetData", ReplyAction="http://tempuri.org/IFileService/GetDataResponse")]
        FileUploadContract.Models.Employee[] GetData(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/GetData", ReplyAction="http://tempuri.org/IFileService/GetDataResponse")]
        System.Threading.Tasks.Task<FileUploadContract.Models.Employee[]> GetDataAsync(string fileName);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, long Length, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : FileUpload.Client.FileUploadProxy.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<FileUpload.Client.FileUploadProxy.IFileService>, FileUpload.Client.FileUploadProxy.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Authenticate(string username, string password) {
            return base.Channel.Authenticate(username, password);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateAsync(string username, string password) {
            return base.Channel.AuthenticateAsync(username, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileUpload.Client.FileUploadProxy.UploadFileResponse FileUpload.Client.FileUploadProxy.IFileService.UploadFile(FileUpload.Client.FileUploadProxy.RemoteFileInfo request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, long Length, System.IO.Stream FileByteStream) {
            FileUpload.Client.FileUploadProxy.RemoteFileInfo inValue = new FileUpload.Client.FileUploadProxy.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            FileUpload.Client.FileUploadProxy.UploadFileResponse retVal = ((FileUpload.Client.FileUploadProxy.IFileService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<FileUpload.Client.FileUploadProxy.UploadFileResponse> FileUpload.Client.FileUploadProxy.IFileService.UploadFileAsync(FileUpload.Client.FileUploadProxy.RemoteFileInfo request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<FileUpload.Client.FileUploadProxy.UploadFileResponse> UploadFileAsync(string FileName, long Length, System.IO.Stream FileByteStream) {
            FileUpload.Client.FileUploadProxy.RemoteFileInfo inValue = new FileUpload.Client.FileUploadProxy.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            return ((FileUpload.Client.FileUploadProxy.IFileService)(this)).UploadFileAsync(inValue);
        }
        
        public FileUploadContract.Models.Reference GetAllFileName() {
            return base.Channel.GetAllFileName();
        }
        
        public System.Threading.Tasks.Task<FileUploadContract.Models.Reference> GetAllFileNameAsync() {
            return base.Channel.GetAllFileNameAsync();
        }
        
        public FileUploadContract.Models.Employee[] GetData(string fileName) {
            return base.Channel.GetData(fileName);
        }
        
        public System.Threading.Tasks.Task<FileUploadContract.Models.Employee[]> GetDataAsync(string fileName) {
            return base.Channel.GetDataAsync(fileName);
        }
    }
}
